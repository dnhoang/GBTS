@{
    ViewBag.Title = "Báo cáo thu nhập";
    List<Green_Bus_Ticket_System_Data.Card> cards =
        (List<Green_Bus_Ticket_System_Data.Card>)ViewBag.Cards;
    var count = 0;
    foreach (var item in cards)
    {
        if (item.Tickets.Count > 0)
        {
            count++;
        }
    }
}


<div class="container-padding" style="overflow: hidden;">
    <div class="col col-md-12 gb-padding text-center">
        <div class="form-inline reportform">
            <div class="form-group">
                <label for="beginDate" class="form-label">TỪ NGÀY</label>
                <div class="input-prepend input-group">
                    <span class="add-on input-group-addon"><i class="fa fa-calendar"></i></span>
                    <input type="text" id="date-picker-begin" class="form-control active" readonly value="@ViewBag.BeginDate">
                </div>
            </div>
            <div class="form-group">
                <label for="example2" class="form-label">ĐẾN NGÀY</label>
                <div class="input-prepend input-group">
                    <span class="add-on input-group-addon"><i class="fa fa-calendar"></i></span>
                    <input type="text" id="date-picker-end" class="form-control active" readonly value="@ViewBag.EndDate">
                </div>
            </div>
            <button type="button" class="btn btn-default" id="get-report"><i class="fa fa-search"></i></button>
        </div>
    </div>
    <div class="panel-body margin-t-20 margin-b-20" style="border: 1px solid #ddd; overflow: auto;">
        <div class="ct-chart ct-perfect-fourth"></div>
    </div>
    <div class="panel-body" style="border: 1px solid #ddd; overflow: auto;">
        <div role="tabpanel">

            <!-- Nav tabs -->
            <ul class="nav nav-tabs tabcolor7-bg" role="tablist">
                <li role="presentation" class="active"><a href="#via-card" aria-controls="via-card" role="tab" data-toggle="tab" aria-expanded="true" class="active">THU NHẬP MUA VÉ TỪ THẺ</a></li>
                <li role="presentation" class=""><a href="#via-cash" aria-controls="via-cash" role="tab" data-toggle="tab" class="" aria-expanded="false">THU NHẬP MUA VÉ TIỀN MẶT</a></li>
            </ul>

            <!-- Tab panes -->
            <div class="tab-content">
                <div role="tabpanel" class="tab-pane active" id="via-card">
                    
                </div>
                <div role="tabpanel" class="tab-pane" id="via-cash">

                </div>
            </div>

        </div>

    </div>
    
</div>

@section CustomJs{
    <script src="~/Content/front/js/chartist/chartist.js"></script>
    <script>
        var options = {
            height: 300,
            axisY: {
                // Lets offset the chart a bit from the labels
                offset: 60,
                // The label interpolation function enables you to modify the values
                // used for the labels on each axis. Here we are converting the
                // values into million pound.
                labelInterpolationFnc: function (value) {
                    return  value + ' đ';
                }
            }
        };

        var data = {
            labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
            series: [
              [12, 9, 7, 8, 5, 4, 6, 2, 3, 3, 4, 6]
            ]
        };

        // Create a new line chart object where as first parameter we pass in a selector
        // that is resolving to our chart container element. The Second parameter
        // is the actual data object.
        var chart = new Chartist.Line('.ct-chart', data, options);

        // Let's put a sequence number aside so we can use it in the event callbacks
        var seq = 0,
          delays = 20,
          durations = 50;

        // Once the chart is fully created we reset the sequence
        chart.on('created', function () {
            seq = 0;
        });


        // On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations
        chart.on('draw', function (data) {
            seq++;

            if (data.type === 'line') {
                // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
                data.element.animate({
                    opacity: {
                        // The delay when we like to start the animation
                        begin: seq * delays + 1000,
                        // Duration of the animation
                        dur: durations,
                        // The value where the animation should start
                        from: 0,
                        // The value where it should end
                        to: 1
                    }
                });
            } else if (data.type === 'label' && data.axis === 'x') {
                data.element.animate({
                    y: {
                        begin: seq * delays,
                        dur: durations,
                        from: data.y + 100,
                        to: data.y,
                        // We can specify an easing function from Chartist.Svg.Easing
                        easing: 'easeOutQuart'
                    }
                });
            } else if (data.type === 'label' && data.axis === 'y') {
                data.element.animate({
                    x: {
                        begin: seq * delays,
                        dur: durations,
                        from: data.x - 100,
                        to: data.x,
                        easing: 'easeOutQuart'
                    }
                });
            } else if (data.type === 'point') {
                data.element.animate({
                    x1: {
                        begin: seq * delays,
                        dur: durations,
                        from: data.x - 10,
                        to: data.x,
                        easing: 'easeOutQuart'
                    },
                    x2: {
                        begin: seq * delays,
                        dur: durations,
                        from: data.x - 10,
                        to: data.x,
                        easing: 'easeOutQuart'
                    },
                    opacity: {
                        begin: seq * delays,
                        dur: durations,
                        from: 0,
                        to: 1,
                        easing: 'easeOutQuart'
                    }
                });
            } 
        });

       

    </script>
}